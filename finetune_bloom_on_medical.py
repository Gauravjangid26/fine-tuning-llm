# -*- coding: utf-8 -*-
"""finetune_bloom_on_medical.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IFauOX0XFuo1Vakiu6Oxmxpdun4Ya8o-
"""

!pip install -U transformers accelerate bitsandbytes

## Load Model & Tokenizer with Quantization
## Use 4-bit quantization to manage GPU memory:

from huggingface_hub import login
login(token="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")

from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig
import torch

model_id = "bigscience/bloom-1b7"

# 8-bit quantization config
quantization_config = BitsAndBytesConfig(
    load_in_8bit=True,  # explicit instead of llm_int8_threshold
    llm_int8_threshold=0.0,
    llm_int8_enable_fp32_cpu_offload=True
)

# Load model in 8-bit
model_8bit = AutoModelForCausalLM.from_pretrained(
    model_id,
    torch_dtype=torch.float16,
    device_map="auto",
    quantization_config=quantization_config
)

#tokenizer
tokenizer = AutoTokenizer.from_pretrained(model_id)

print(f"Model '{model_id}' loaded successfully with 8-bit quantization.")

# Inference example
prompt = "Hello, how are you?"

def inference(prompt):
    inputs = tokenizer(prompt, return_tensors="pt").to(model_8bit.device)
    outputs = model_8bit.generate(**inputs,max_new_tokens=100)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)



print(inference(prompt))

#df
import pandas as pd
df = pd.read_json("hf://datasets/FreedomIntelligence/medical-o1-reasoning-SFT/medical_o1_sft.json")

df.head()

from datasets import Dataset

df["text"] = df.apply(lambda x: f"### Question:\n{x['Question']}\n\n### Reasoning:\n{x['Complex_CoT']}\n\n### Answer:\n{x['Response']}", axis=1)

dataset = Dataset.from_pandas(df[["text"]])


def tokenize_function(examples):
    tokenized_inputs = tokenizer(examples["text"], truncation=True, padding="max_length", max_length=512)
    # Add labels for causal language modeling
    tokenized_inputs["labels"] = tokenized_inputs["input_ids"].copy()
    return tokenized_inputs

tokenized_dataset = dataset.map(tokenize_function, batched=True)

# Remove the original text column after tokenization
tokenized_dataset = tokenized_dataset.remove_columns(["text"])

from peft import LoraConfig, get_peft_model, prepare_model_for_kbit_training
model = prepare_model_for_kbit_training(model_8bit)

lora_config = LoraConfig(
    r=1,
    lora_alpha=32,
    target_modules=["query_key_value"],  # for BLOOM
    lora_dropout=0.05,
    bias="none",
    task_type="CAUSAL_LM"
)

model = get_peft_model(model, lora_config)

# 4Ô∏è‚É£ Training arguments
from transformers import AutoModelForCausalLM, AutoTokenizer, TrainingArguments, Trainer

training_args = TrainingArguments(
    output_dir="./bloom-lora-medical-fast",
    per_device_train_batch_size=1,
    gradient_accumulation_steps=2,
    num_train_epochs=0.1,  # less than 1 epoch for speed
    learning_rate=5e-4,
    fp16=True,
    logging_steps=1,
    save_strategy="no",  # no checkpoint saving to speed up
    optim="adamw_torch",
    gradient_checkpointing=True,
    remove_unused_columns=False
)

# 5Ô∏è‚É£ Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_dataset,
    tokenizer=tokenizer
)

# 6Ô∏è‚É£ Train
trainer.train()

trainer.save_model("./bloom-lora-medical")  # Saves model
tokenizer.save_pretrained("./bloom-lora-medical")  # Saves tokenizer

model_path = "./bloom-lora-medical"

tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModelForCausalLM.from_pretrained(model_path)

from transformers import pipeline
# Create inference pipeline
text_gen = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    max_length=512,
    temperature=0.7,
    top_p=0.9
)

# Example query
prompt = "Explain the symptoms and treatment of diabetes in simple terms."
output = text_gen(prompt, num_return_sequences=1)

print("üí° Model Output:\n", output[0]['generated_text'])

output = text_gen("i have an headache ", num_return_sequences=1)

print("üí° Model Output:\n", output[0]['generated_text'])

!git init
!git add .
!git commit -m "first commit"

!git push -u origin main

! git config --global user.email "gauravjangid341542@gmail,com"
! git config --global user.name "gauravjangid26"

!git remote remove origin

! git remote add origin https://github.com/Gauravjangid26/fine-tuning-llm.git

